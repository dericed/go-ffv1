#include <stdlib.h>
#include <stdio.h>

#include "MatroskaParser.h"
#include "io.h"

int main()
{
    int ret = 0;
    IO *io = NULL;
    MatroskaFile *m = NULL;
    char errbuf[1024] = {0};
    FILE *file = fopen("../input.mkv", "rb");
    if (file == NULL) {
        printf("can't open file\n");
        ret = 1;
        goto end;
    }

    io = calloc(1, sizeof(*io));
    if (io == NULL) {
        printf("failed io alloc\n");
        ret = 1;
        goto end;
    }

    set_callbacks(io, file);

    m = mkv_OpenEx((InputStream *)io, 0, MKVF_AVOID_SEEKS, &errbuf[0], 1024);
    if (m == NULL) {
        printf("failed to open mkv: %s\n", &errbuf[0]);
        ret = 1;
        goto end;
    }

    {
        int tracks = mkv_GetNumTracks(m);
        if (tracks != 1) {
            printf("fail tracks num = %d\n");
            ret = 1;
            goto end;
        }
    }

    {
        TrackInfo *info = mkv_GetTrackInfo(m, 0);
        if (info == NULL) {
            printf("failed tracks\n");
            ret = 1;
            goto end;
        }
        printf("extradata_size = %u\n", info->CodecPrivateSize);
    }

    {
        unsigned int track = 0, size = 0, flags = 0;
        ulonglong start, end, pos;
        longlong discard;
        char *data = NULL;
        int mret = mkv_ReadFrame(m, 0, &track, &start, &end, &pos, &size, &data, &flags, &discard);

        printf("packet 0 pos=%llu size=%u\n", pos, size);
    }

end:
    free(io);
    if (m != NULL)
        mkv_Close(m);
    if (file != NULL)
        fclose(file);
    return ret;
}
